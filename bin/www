#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('ProductionManager:server');
const http = require('http');

require('timers');

if (app.get('env') === 'development') {
    console.warn(' -- RUNNING DEVELOPMENT MODE --');
}

/**
 * Cleanup download folder
 */
const DownloadService = require('../services/download_service');
DownloadService.purgeDownloadFiles();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3042');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require('socket.io').listen(app.listen(port));
require('../controller/socket_io_controller')(io);

// setup websocket clients
app.ws_clients = {
    license: require('../websocket/license_client'),
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


/**
 * Don't crash on errors during production
 */

if (app.get('env') !== 'development') {
    process.on('uncaughtException', function (err) {
        // handle the error safely
        console.error(err);
    });
}